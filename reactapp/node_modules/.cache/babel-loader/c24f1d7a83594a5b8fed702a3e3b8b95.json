{"ast":null,"code":"var _jsxFileName = \"/Users/vedantatrivedi/Downloads/tarp/reactapp/src/components/Editor/TextEditor.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Editor } from 'slate-react';\nimport { Value } from 'slate';\nimport Icon from 'react-icons-kit';\nimport { bold } from 'react-icons-kit/feather/bold';\nimport { italic } from 'react-icons-kit/feather/italic';\nimport { code } from 'react-icons-kit/feather/code';\nimport { list } from 'react-icons-kit/feather/list';\nimport { underline } from 'react-icons-kit/feather/underline';\nimport Button from 'react-bootstrap/Button';\nimport { BoldMark, ItalicMark, FormatToolbar } from '.';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\nexport default class TextEditor extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onChange = ({\n      value\n    }) => {\n      this.setState({\n        value\n      });\n      console.log(this.state.value);\n    };\n\n    this.onKeyDown = (e, change) => {\n      /*\n          we want all our commands to start with the user pressing ctrl,\n          if they don't--we cancel the action.\n      */\n      if (!e.ctrlKey) {\n        return;\n      }\n\n      e.preventDefault();\n      /* Decide what to do based on the key code... */\n\n      switch (e.key) {\n        /* When \"b\" is pressed, add a \"bold\" mark to the text. */\n        case 'b':\n          {\n            change.toggleMark('bold');\n            return true;\n          }\n\n        case 'i':\n          {\n            change.toggleMark('italic');\n            return true;\n          }\n\n        case 'c':\n          {\n            change.toggleMark('code');\n            return true;\n          }\n\n        case 'l':\n          {\n            change.toggleMark('list');\n            return true;\n          }\n\n        case 'u':\n          {\n            change.toggleMark('underline');\n            return true;\n          }\n\n        default:\n          {\n            return;\n          }\n      }\n    };\n\n    this.renderMark = props => {\n      switch (props.mark.type) {\n        case 'bold':\n          return React.createElement(BoldMark, Object.assign({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }));\n\n        case 'italic':\n          return React.createElement(ItalicMark, Object.assign({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }));\n\n        case 'code':\n          return React.createElement(\"code\", Object.assign({}, props.attributes, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }), props.children);\n\n        case 'list':\n          return React.createElement(\"ul\", Object.assign({}, props.attributes, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }), React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }, props.children));\n\n        case 'underline':\n          return React.createElement(\"u\", Object.assign({}, props.attributes, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }), props.children);\n\n        default:\n          {\n            return;\n          }\n      }\n    };\n\n    this.onMarkClick = (e, type) => {\n      /* disabling browser default behavior like page refresh, etc */\n      e.preventDefault();\n      /* grabbing the this.state.value */\n\n      const value = this.state.value;\n      /*\n          applying the formatting on the selected text\n          which the desired formatting\n      */\n\n      const change = value.change().toggleMark(type);\n      /* calling the  onChange method we declared */\n\n      this.onChange(change);\n    };\n\n    this.state = {\n      value: Value.fromJSON(this.props.jsonData)\n    };\n    this.submitEntry = this.submitEntry.bind(this);\n  } // componentDidMount() {\n  // \tthis.setState({value:Value.fromJSON(this.props.jsonData)})\n  // }\n  // On change, update the app's React state with the new editor value.\n\n\n  submitEntry() {\n    //alert(\"submit\")\n    // create a new XMLHttpRequest\n    const xhr = new XMLHttpRequest(); // get a callback when the server responds\n\n    xhr.addEventListener('load', () => {}); // open the request with the verb and the url\n\n    xhr.open('POST', '/new_post?title=testTitle&content=' + this.state.value.document.text);\n    console.log(this.state.value.document.text); // send the request\n\n    xhr.send();\n    window.location.reload();\n  }\n\n  render() {\n    if (this.props.editable == \"True\") {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(FormatToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onPointerDown: e => this.onMarkClick(e, 'bold'),\n        className: \"tooltip-icon-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onPointerDown: e => this.onMarkClick(e, 'italic'),\n        className: \"tooltip-icon-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: italic,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onPointerDown: e => this.onMarkClick(e, 'code'),\n        className: \"tooltip-icon-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onPointerDown: e => this.onMarkClick(e, 'list'),\n        className: \"tooltip-icon-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: list,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onPointerDown: e => this.onMarkClick(e, 'underline'),\n        className: \"tooltip-icon-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: underline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }))), React.createElement(Editor, {\n        value: this.state.value,\n        onChange: this.onChange,\n        onKeyDown: this.onKeyDown,\n        renderMark: this.renderMark,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"success\",\n        onClick: this.submitEntry,\n        style: {\n          margin: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Submit\")));\n    } else {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(Editor, {\n        value: this.state.value,\n        onChange: this.onChange,\n        onKeyDown: this.onKeyDown,\n        renderMark: this.renderMark,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/vedantatrivedi/Downloads/tarp/reactapp/src/components/Editor/TextEditor.js"],"names":["React","Component","Fragment","Editor","Value","Icon","bold","italic","code","list","underline","Button","BoldMark","ItalicMark","FormatToolbar","divWithClassName","TextEditor","constructor","props","onChange","value","setState","console","log","state","onKeyDown","e","change","ctrlKey","preventDefault","key","toggleMark","renderMark","mark","type","attributes","children","onMarkClick","fromJSON","jsonData","submitEntry","bind","xhr","XMLHttpRequest","addEventListener","open","document","text","send","window","location","reload","render","editable","margin"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport {Editor} from 'slate-react';\nimport {Value} from 'slate';\n\nimport Icon from 'react-icons-kit';\nimport {bold} from 'react-icons-kit/feather/bold';\nimport {italic} from 'react-icons-kit/feather/italic';\nimport {code} from 'react-icons-kit/feather/code';\nimport {list} from 'react-icons-kit/feather/list';\nimport {underline} from 'react-icons-kit/feather/underline';\nimport Button from 'react-bootstrap/Button'\n\nimport {BoldMark, ItalicMark, FormatToolbar} from '.';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\nexport default class TextEditor extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n          value: Value.fromJSON(this.props.jsonData)\n      };\n      this.submitEntry = this.submitEntry.bind(this);\n    }\n\n    // componentDidMount() {\n    // \tthis.setState({value:Value.fromJSON(this.props.jsonData)})\n    // }\n\n    // On change, update the app's React state with the new editor value.\n    onChange = ({value}) => {\n        this.setState({value});\n        console.log(this.state.value);\n    };\n\n    onKeyDown = (e, change) => {\n        /*\n            we want all our commands to start with the user pressing ctrl,\n            if they don't--we cancel the action.\n        */\n\n        if (!e.ctrlKey) {\n            return;\n        }\n\n        e.preventDefault();\n\n        /* Decide what to do based on the key code... */\n        switch (e.key) {\n            /* When \"b\" is pressed, add a \"bold\" mark to the text. */\n            case 'b': {\n                change.toggleMark('bold');\n                return true;\n            }\n            case 'i': {\n                change.toggleMark('italic');\n                return true;\n            }\n\n            case 'c': {\n                change.toggleMark('code');\n                return true;\n            }\n\n            case 'l': {\n                change.toggleMark('list');\n                return true;\n            }\n\n            case 'u': {\n                change.toggleMark('underline');\n                return true;\n            }\n            default: {\n                return;\n            }\n        }\n    };\n\n    renderMark = (props) => {\n        switch (props.mark.type) {\n            case 'bold':\n                return <BoldMark {...props} />;\n\n            case 'italic':\n                return <ItalicMark {...props} />;\n\n            case 'code':\n                return <code {...props.attributes}>{props.children}</code>;\n\n            case 'list':\n                return (\n                    <ul {...props.attributes}>\n                        <li>{props.children}</li>\n                    </ul>\n                );\n\n            case 'underline':\n                return <u {...props.attributes}>{props.children}</u>;\n\n            default: {\n                return;\n            }\n        }\n    };\n\n    onMarkClick = (e, type) => {\n        /* disabling browser default behavior like page refresh, etc */\n        e.preventDefault();\n\n        /* grabbing the this.state.value */\n        const {value} = this.state;\n\n        /*\n            applying the formatting on the selected text\n            which the desired formatting\n        */\n        const change = value.change().toggleMark(type);\n\n        /* calling the  onChange method we declared */\n        this.onChange(change);\n    };\n\n    submitEntry() {\n        //alert(\"submit\")\n        // create a new XMLHttpRequest\n        const xhr = new XMLHttpRequest();\n        // get a callback when the server responds\n        xhr.addEventListener('load', () => {\n        });\n        // open the request with the verb and the url\n        xhr.open('POST', '/new_post?title=testTitle&content='+this.state.value.document.text);\n        console.log(this.state.value.document.text);\n        // send the request\n        xhr.send()\n        window.location.reload();\n    }\n\n\n    render() {\n        if (this.props.editable == \"True\") {\n            return (\n                <div>\n                    <Fragment>\n                        <FormatToolbar>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'bold')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={bold}/>\n                            </button>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'italic')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={italic}/>\n                            </button>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'code')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={code}/>\n                            </button>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'list')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={list}/>\n                            </button>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'underline')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={underline}/>\n                            </button>\n                        </FormatToolbar>\n                        <Editor\n                            value={this.state.value}\n                            onChange={this.onChange}\n                            onKeyDown={this.onKeyDown}\n                            renderMark={this.renderMark}\n                        />\n\n                        {/*<Button variant=\"success\"*/}\n                        <Button variant=\"success\" onClick={this.submitEntry} style={{margin:\"20px\"}}>Submit</Button>\n                        {/*onClick={this.submitEntry()}*/}\n                        {/*>Success</Button>*/}\n\n\n                    </Fragment>\n\n                </div>\n\n            );\n        } else {\n            return (\n                <Fragment>\n                    <Editor\n                        value={this.state.value}\n                        onChange={this.onChange}\n                        onKeyDown={this.onKeyDown}\n                        renderMark={this.renderMark}\n                        readOnly\n                    />\n\n                </Fragment>\n            );\n        }\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}