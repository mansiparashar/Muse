{"ast":null,"code":"var _jsxFileName = \"/Users/vedantatrivedi/Downloads/tarp/reactapp/src/components/Graph/Graph.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './Graph.css';\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props); // set graph options\n\n    this.state = {\n      options: {\n        legend: {\n          display: false\n        }\n      },\n      posts: [],\n      entryDate: [],\n      entryScore: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:80/get_calendar').then(response => response.json()).then(({\n      posts\n    }) => {\n      var entryDate = [];\n      var entryScore = [];\n\n      for (let i = 0; i < posts.length; i++) {\n        console.log(posts[i].date);\n        console.log(posts[i].score);\n        entryDate.push(posts[i].date);\n        entryScore.push(posts[i].score);\n      }\n\n      this.setState({\n        posts,\n        entryDate,\n        entryScore\n      });\n    });\n  }\n\n  render() {\n    const moodData = canvas => {\n      // create gradient\n      const ctx = canvas.getContext(\"2d\");\n      const gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);\n      gradientStroke.addColorStop(0, \"#80b6f4\");\n      gradientStroke.addColorStop(0.2, \"#94d973\");\n      gradientStroke.addColorStop(0.5, \"#fad874\");\n      gradientStroke.addColorStop(1, \"#f49080\");\n      return {\n        // set x-axis labels\n        labels: this.state.entryDate,\n        // customize data\n        datasets: [{\n          label: 'Mood Chart',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: gradientStroke,\n          borderColor: gradientStroke,\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: gradientStroke,\n          pointBackgroundColor: gradientStroke,\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: gradientStroke,\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          // y-axis data\n          data: this.state.entryScore\n        }]\n      };\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Your mood graph!\"), React.createElement(Line, {\n      data: moodData,\n      options: this.state.options,\n      redraw: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/Users/vedantatrivedi/Downloads/tarp/reactapp/src/components/Graph/Graph.js"],"names":["React","Component","Line","Graph","constructor","props","state","options","legend","display","posts","entryDate","entryScore","componentDidMount","fetch","then","response","json","i","length","console","log","date","score","push","setState","render","moodData","canvas","ctx","getContext","gradientStroke","createLinearGradient","addColorStop","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Line} from 'react-chartjs-2';\nimport './Graph.css';\n\nclass Graph extends Component {\n    constructor(props){\n        super(props);\n        // set graph options\n        this.state = {\n            options: {\n                legend: {\n                    display: false\n                }\n            },\n            posts: [],\n            entryDate: [],\n            entryScore: [],\n        }\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:80/get_calendar')\n            .then(response => response.json())\n            .then(({ posts }) => {\n                var entryDate = [];\n                var entryScore = [];\n                for (let i = 0; i < posts.length; i++){\n                    console.log(posts[i].date);\n                    console.log(posts[i].score);\n                    entryDate.push(posts[i].date);\n                    entryScore.push(posts[i].score);\n                }\n                this.setState({ posts, entryDate, entryScore });\n            });\n    }\n\n    render() {\n        const moodData = (canvas) => {\n            // create gradient\n            const ctx = canvas.getContext(\"2d\")\n            const gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);\n            gradientStroke.addColorStop(0, \"#80b6f4\");\n            gradientStroke.addColorStop(0.2, \"#94d973\");\n            gradientStroke.addColorStop(0.5, \"#fad874\");\n            gradientStroke.addColorStop(1, \"#f49080\");\n            return {\n                // set x-axis labels\n                labels: this.state.entryDate,\n                // customize data\n                datasets: [\n                    {\n                        label: 'Mood Chart',\n                        fill: false,\n                        lineTension: 0.1,\n                        backgroundColor: gradientStroke,\n                        borderColor: gradientStroke,\n                        borderCapStyle: 'butt',\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        borderJoinStyle: 'miter',\n                        pointBorderColor: gradientStroke,\n                        pointBackgroundColor: gradientStroke,\n                        pointBorderWidth: 1,\n                        pointHoverRadius: 5,\n                        pointHoverBackgroundColor: gradientStroke,\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        pointHoverBorderWidth: 2,\n                        pointRadius: 1,\n                        pointHitRadius: 10,\n                        // y-axis data\n                        data: this.state.entryScore,\n                    }\n                ]\n            }\n        };\n        return (\n            <div>\n                <h1 className=\"text-center\">Your mood graph!</h1>\n                <Line\n                    data={moodData}\n                    options={this.state.options}\n                    redraw\n                />\n            </div>\n        );\n    }\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}